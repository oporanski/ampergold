#!/usr/bin/env python
import datetime
import requests
import MySQLdb
import smtplib

from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from datetime import datetime

#######GLOBALS########################################################################
FROM = "ampergold@starelamy.org"
TO = ["oporanski@gmail.com", "marcin.opinc@gmail.com"]
#TO = ["oporanski@gmail.com"]
SUBJECT = "Average number of users Poloniex"
SERVER = "localhost"
DEBUG = True

######################################################################################

#######FUNCTIONS##########
def get_market(sqlq):
    conn = MySQLdb.connect(host="localhost",user="root",passwd="PKjsizw02k",db="poloniex")
    x = conn.cursor()
    try:
	x.execute(sqlq)
	rows = x.fetchall()
    except:
	conn.rollback()
    ret = []
    for row in rows:
	ret = row
    conn.close()
    return ret


def get_average_last_hour(sqlq):
    conn = MySQLdb.connect(host="localhost",user="root",passwd="PKjsizw02k",db="poloniex")
    #log(sqlq)
    x = conn.cursor()
    try:
	x.execute(sqlq)
	rows = x.fetchall()
    except:
	conn.rollback()
    #log("Number of records: " + str(len(rows)))
    avg_users = 0
    for row in rows:
	#log("Value:" + row[0])
	avg_users += int(row[0])
    avg_users = avg_users/len(rows)
    #log ("AVG:" + str(avg_users))
    conn.close()
    return avg_users

def get_average_last_hour(sqlq):
    conn = MySQLdb.connect(host="localhost",user="root",passwd="PKjsizw02k",db="poloniex")
    #log(sqlq)
    x = conn.cursor()
    try:
	x.execute(sqlq)
	rows = x.fetchall()
    except:
	conn.rollback()
    #log("Number of records: " + str(len(rows)))
    avg_users = 0
    for row in rows:
	#log("Value:" + row[0])
	avg_users += int(row[0])
    avg_users = avg_users/len(rows)
    #log ("AVG:" + str(avg_users))
    conn.close()
    return avg_users


#######HELPERS##########
def sendMail(FROM,TO,SUBJECT,TEXT,HTML,SERVER):
    """Function sending email Input: FROM,TO,SUBJECT,TEXT,HTML,SERVER"""
    #write_date_of_last_notyfication(notyfiType)
    COMMASPACE = ', '
    msg = MIMEMultipart('alternative')
    msg['Subject'] = SUBJECT
    msg['From'] = FROM
    msg['To'] = COMMASPACE.join(TO)
    # Record the MIME types of both parts - text/plain and text/html.
    part1 = MIMEText(TEXT, 'plain')
    part2 = MIMEText(HTML, 'html')
    # Attach parts into message container.
    # According to RFC 2046, the last part of a multipart message, in this case
    # the HTML message, is best and preferred.
    msg.attach(part1)
    msg.attach(part2)
    # Send the email via our own SMTP server.
    s = smtplib.SMTP(SERVER)
    s.sendmail(FROM, TO, msg.as_string())
    s.quit()

def getDateTimeFromISO8601String(s):
    d = dateutil.parser.parse(s)
    return d

def log(s):
    if DEBUG:
        print datetime.now(), s

#######MAIN##########
log("**********************************************************")
#get number of users avarage last hour 
sql_query = "SELECT `Number_Of_Users` FROM `Users_Online` WHERE `Time_Stamp` >= NOW() - INTERVAL 1 HOUR"
avg_hour_users = get_average_last_hour(sql_query)
log('Average last hour: '+ str(avg_hour_users))

#get number of users avarage last 24 hour 
sql_query = "SELECT `Number_Of_Users` FROM `Users_Online` WHERE `Time_Stamp` >= NOW() - INTERVAL 1 DAY"
avg_day_users = get_average_last_hour(sql_query)
log('Average last 24 hour: '+ str(avg_day_users))

#get number of users avarage 2 days ago hour 
sql_query = "SELECT `Number_Of_Users` FROM `Users_Online` WHERE `Time_Stamp` >= NOW() - INTERVAL 2 DAY AND `Time_Stamp` <= NOW() - INTERVAL 1 DAY"
avg_2day_users = get_average_last_hour(sql_query)
log('Average 2 days ago: '+ str(avg_day_users))

#count average Houerly and Daily
h_c = float(avg_hour_users)/float(avg_day_users)*100
d_c = float(avg_day_users)/float(avg_2day_users)*100

#convert to strings for mail 
ahu = str("%.0f" % round(avg_hour_users,0))
adu = str("%.0f" % round(avg_day_users,0))
a2du = str("%.0f" % round(avg_2day_users,0))
h_cs = str("%.2f" % round(h_c,2))
d_cs = str("%.2f" % round(d_c,2))
log("Houerly[%]: " + h_cs)
log("Daily[%]: " + d_cs)


#Create the body of the message (a plain-text and an HTML version).
TEXT = "Poloniex Users:\n Last Hour:" + ahu + \
    "\n Last day:" + adu + \
    "\n 2 days ago:" + a2du + \
    "\nChanges in number of users on Poloniex\n Houerly[%]: "+ h_cs+" \n Daily[%]: " + d_cs

HTML = "<html><head><style>table {border-collapse: collapse;} table, th, td {border: 1px solid black;}</style></head><body><p>Poloniex Users:<br>" + \
    "<ul> <li>Last Hour:" + ahu + \
    "</li><li> Last day:" + adu + \
    "</li><li> 2 days ago:" + a2du + \
    "</li></ul></p>" + \
    "<p>Changes in number of users on Poloniex:<br><ul>" + \
    "<li>Houerly[%]: "+ h_cs+"</li><li> Daily[%]: " + d_cs + \
    "</li></ul></p>"

###############################################################
#MARKETS
HTML += """<p>Poloniex Markets:<br>
            <table border="1" cellpadding="4"><tr>
            <td>Market</td>
            <td>Last Price</td>
            <td>Percent Change</td>
            <td>Base Volume</td>
            <td>Quote Volume</td>"""
TEXT = "Poloniex Markets:\n Market, \tLast, \tPrice, \tPercent Change, \tBase Volume, \tQuote Volume\n"

markets = ["USDT_BTC", "BTC_PASC", "BTC_XMR", "BTC_ETH", "BTC_ETC", "BTC_VTC", "BTC_LTC", "BTC_DASH"]
for market in markets: 
    sql_query = "SELECT Last, PercentChange, BaseVolume, QuoteVolume FROM " + market + " ORDER BY id DESC LIMIT 1"
    res = get_market(sql_query)
    TEXT += market + ": \t" + '{0:.6f}'.format(res[0]) + ", \t" + '{0:.2f}'.format(res[1]) + ", \t" \
         + '{0:.2f}'.format(res[2]) + ", \t" + '{0:.2f}'.format(res[3]) + "\n"
    HTML += "<tr><td>" + market + "</td><td>" + '{0:.6f}'.format(res[0]) + "</td><td>" + '{0:.2f}'.format(res[1]) \
         + "</td><td>" + '{0:.2f}'.format(res[2]) + "</td><td>" + '{0:.2f}'.format(res[3]) + "</td></tr>"

HTML += "</table>"
HTML += "</p></body></html>"

#log(TEXT)
#log(HTML)
sendMail(FROM,TO,SUBJECT,TEXT,HTML,SERVER)
log("Email Sent To: " + ", ".join(TO))
